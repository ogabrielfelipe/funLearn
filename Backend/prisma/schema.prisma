// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../Documentation/ERD.pdf"
  theme    = "neutral"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Administrator {
  id       String  @id @default(uuid())
  name     String  @db.VarChar(155)
  username String  @unique @db.VarChar(50)
  password String  @db.VarChar(155)
  active   Boolean @default(true)

  @@map("administrator")
}

model Teacher {
  id       String  @id @unique @default(uuid())
  name     String  @db.VarChar(155)
  username String  @unique @db.VarChar(50)
  password String  @db.VarChar(155)
  active   Boolean @default(true)
  team     Team[]
  themes   Theme[]

  @@map("teacher")
}

model Team {
  id     String  @id @default(uuid())
  name   String  @unique @db.VarChar(155)
  active Boolean @default(true)

  teacherID String
  teacher   Teacher @relation(fields: [teacherID], references: [id])

  students StudentsOnTeams[]
  themes   TeamsOnThemes[]

  @@map("team")
}

model Student {
  id       String  @id @default(uuid())
  name     String  @db.VarChar(155)
  register BigInt  @unique @db.BigInt
  password String  @db.VarChar(155)
  active   Boolean @default(true)

  teams     StudentsOnTeams[]
  positions Position[]

  @@map("student")
}

model StudentsOnTeams {
  studentID String
  student   Student @relation(fields: [studentID], references: [id])
  teamID    String
  team      Team    @relation(fields: [teamID], references: [id])

  @@id([studentID, teamID])
  @@map("students_on_teams")
}

model TeamsOnThemes {
  teamID String
  team   Team   @relation(fields: [teamID], references: [id])

  themeID String
  theme   Theme  @relation(fields: [themeID], references: [id])

  visible Boolean @default(true)

  @@id([teamID, themeID])
  @@map("teams_on_themes")
}

model Theme {
  id          String  @id @default(uuid())
  name        String  @db.VarChar(155)
  description String  @db.VarChar(512)
  active      Boolean

  ask       Ask[]
  teams     TeamsOnThemes[]
  positions Position[]

  teacherID String
  teacher   Teacher @relation(fields: [teacherID], references: [id])

  @@map("theme")
}

model Position {
  id           String  @id @default(uuid())
  started      Boolean
  finished     Boolean
  finishedTime Boolean
  finishedOver Boolean
  score        BigInt
  life         Int

  dateInitial DateTime
  dateFinish  DateTime

  game Game[]

  studentID String
  student   Student @relation(fields: [studentID], references: [id])
  themeID   String
  theme     Theme   @relation(fields: [themeID], references: [id])

  @@map("position")
}

model Game {
  id      String  @id @default(uuid())
  point   Int
  right   Boolean
  tip     Int
  attempt Int
  time    String

  askID String
  ask   Ask    @relation(fields: [askID], references: [id])

  positionID String
  position   Position @relation(fields: [positionID], references: [id])

  @@map("game")
}

model Ask {
  id       String  @id @default(uuid())
  question String  @db.VarChar(512)
  active   Boolean @default(true)
  image    String  @db.VarChar(155)
  level    Level   @default(INITIAL)

  themeID String
  theme   Theme  @relation(fields: [themeID], references: [id])

  answer Answer[]
  tip    Tip[]
  game   Game[]

  @@map("ask")
}

model Tip {
  id      String  @id @default(uuid())
  name    String
  visible Boolean @default(true)

  askID String
  ask   Ask    @relation(fields: [askID], references: [id])

  @@map("tip")
}

enum Level {
  INITIAL
  INTERMEDIARY
  ADVANCED
}

model Answer {
  id          String  @id @default(uuid())
  description String  @db.VarChar(255)
  correct     Boolean @default(false)

  askID String
  ask   Ask    @relation(fields: [askID], references: [id])

  @@map("answer")
}
